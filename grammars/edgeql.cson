# AUTOGENERATED FROM grammars/src/edgeql.syntax.yaml
name: "EdgeQL"
scopeName: "source.edgeql"
fileTypes: [
  "edgeql"
  "esdl"
]
uuid: "a560aad6-9c13-49c5-a369-5fb272c8ec1a"
patterns: [
  {
    include: "#all"
  }
]
repository:
  all:
    patterns: [
      {
        include: "#fnstatement"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.statement.delimiter.edgeql"
        match: "(;)"
      }
    ]
  expressions:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#code"
      }
      {
        include: "#keywords"
      }
      {
        include: "#fncalls"
      }
      {
        include: "#operators"
      }
      {
        include: "#builtins"
      }
      {
        include: "#types"
      }
      {
        include: "#quoted-name"
      }
      {
        include: "#values"
      }
      {
        include: "#link-properties"
      }
      {
        include: "#variables"
      }
      {
        include: "#parentheses"
      }
      {
        include: "#squarebraces"
      }
      {
        include: "#curlybraces"
      }
      {
        include: "#casts"
      }
    ]
  code:
    patterns: [
      {
        match: '''
          (?xi)
            \\b(FROM) \\s+ (EDGEQL | SQL) \\s+ (EXPRESSION)
          
        '''
        captures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "keyword.declaration.edgeql"
      }
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (SQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.sql"
          }
        ]
      }
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (EDGEQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
    ]
  fnstatement:
    begin: "(?ix) \\b(?<![:\\.])(FUNCTION|AGGREGATE|ABSTRACT CONSTRAINT)\\b"
    end: "(?=[^\\s\\w:]|\\bEXTENDING\\b|$)"
    beginCaptures:
      "1":
        name: "keyword.declaration.edgeql"
    patterns: [
      {
        include: "#builtins"
      }
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  fncallargs:
    patterns: [
      {
        include: "#definition"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.separator.arguments.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  definition:
    match: '''
      (?x)
        (?:
          ([[:alpha:]_][[:alnum:]_]*)
          |
          ([\\.\\d]\\S*?)
        ) (?=\\s*:=)
      
    '''
    captures:
      "1":
        name: "variable.parameter.definition.edgeql"
      "2":
        name: "invalid.illegal.definition.edgeql"
  parencommon:
    patterns: [
      {
        name: "punctuation.separator.element.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  parentheses:
    begin: "(\\()"
    end: "(\\))"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  squarebraces:
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "keyword.operator.edgeql"
        match: "(^|\\b|\\s)(->)($|\\b|\\s)"
      }
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  curlybraces:
    begin: "(\\{)"
    end: "(\\})"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#commandblock"
      }
      {
        include: "#shape"
      }
    ]
  commandblock:
    begin: "(?=SET|CREATE|ALTER|DROP|RENAME|FROM)"
    end: "(?=\\})"
    patterns: [
      {
        include: "#all"
      }
    ]
  shape:
    begin: "(?=\\S)"
    end: "(?=\\})"
    patterns: [
      {
        name: "punctuation.statement.delimiter.edgeql"
        match: "(;)"
      }
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  comments:
    patterns: [
      {
        name: "comment.line.number-sign.edgeql"
        match: "(#)\\s*((BUG|FIXME|TODO|XXX)).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
          "2":
            name: "comment.line.note.notation.edgeql"
          "3":
            name: "comment.line.note.edgeql"
      }
      {
        name: "comment.line.number-sign.edgeql"
        match: "(#).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
      }
    ]
  keywords:
    patterns: [
      {
        name: "constant.language.boolean.true.edgeql"
        match: "(?i)\\b(TRUE)\\b"
      }
      {
        name: "constant.language.boolean.false.edgeql"
        match: "(?i)\\b(FALSE)\\b"
      }
      {
        name: "constant.language.empty.edgeql"
        match: "(?i)\\b(EMPTY)\\b"
      }
      {
        name: "keyword.declaration.edgeql"
        match: "(?i)\\b(?<!::|\\.|\\.<|\\.>)(CONSTRAINT)\\b(?!=\\s+\\()"
      }
      {
        name: "keyword.declaration.edgeql"
        match: '''
          (?ix) \\b(?<!::|\\.|\\.<|\\.>)(
            (?# special case)
            (named \\s+ only)
            |
            (as \\s+ text)
            |
            (all (?!\\s*\\())
            |
          
            (?# unreserved)
            abort | abstract | access | after | alias |
            allow | annotation | applied | as | asc |
            assignment | before | cardinality | cast | committed |
            config | conflict | cube | current | database |
            ddl | declare | default | deferrable | deferred |
            delegated | deny | desc | each | empty |
            extension | final | first | from | function |
            future | implicit | index | infix | inheritable |
            instance | into | isolation | last | link |
            migration | multi | object | of | only |
            onto | operator | optionality | order | orphan |
            overloaded | owned | package | policy | populate |
            postfix | prefix | property | proposed | pseudo |
            read | reject | release | rename | required |
            reset | restrict | rewrite | role | roles |
            rollup | savepoint | scalar | schema | sdl |
            serializable | session | source | superuser | system |
            target | ternary | then | to | transaction |
            trigger | type | unless | using | verbose |
            version | view | write
            |
            (?# reserved)
            administer | alter | analyze | and | anyarray |
            anytuple | begin | by | case | check |
            commit | configure | create | deallocate | delete |
            describe | detached | discard | distinct | do |
            drop | else | end | except | exists |
            explain | extending | fetch | filter | for |
            get | global | grant | group | if |
            ilike | import | in | insert | intersect |
            introspect | is | like | limit | listen |
            load | lock | match | module | move |
            never | not | notify | offset | on |
            optional | or | over | partition | prepare |
            raise | refresh | reindex | revoke | rollback |
            select | set | single | start | typeof |
            union | update | variadic | when | window |
            with
          )\\b
          
        '''
      }
    ]
  operators:
    patterns: [
      {
        name: "keyword.operator.navigation.edgeql"
        match: "(\\.[<>])"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
      {
        name: "keyword.declaration.edgeql"
        match: "->"
      }
      {
        name: "keyword.operator.edgeql"
        match: '''
          (?x)
            \\?\\!\\= | \\?\\? | \\?\\= | \\>\\= | \\<\\= | \\:\\= | \\/\\/ | \\+\\+ |
            \\!\\= | \\^ | \\> | \\= | \\< | \\/ | \\- | \\+ |
            \\* | \\%
          
        '''
      }
    ]
  types:
    patterns: [
      {
        begin: "\\b(?<!::|\\.)(tuple)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            include: "#types"
          }
          {
            name: "punctuation.separator.type.edgeql"
            match: "(,)"
          }
          {
            match: "(:)"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        begin: "\\b(?<!::|\\.)(array)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            name: "invalid.illegal.type.edgeql"
            match: "array"
          }
          {
            include: "#types"
          }
          {
            include: "#array-dimensions"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        name: "storage.type.edgeql"
        match: '''
          (?x) \\b(?<!::|\\.)(
            array | tuple
          )\\b
          
        '''
      }
      {
        include: "#builtin-modules"
      }
      {
        include: "#builtin-types"
      }
    ]
  "types-common":
    patterns: [
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  "array-dimensions":
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "constant.numeric.edgeql"
        match: "(\\d+)"
      }
      {
        name: "invalid.illegal.type.edgeql"
        match: "\\S+"
      }
    ]
  variables:
    name: "constant.language.variable.edgeql"
    begin: "(\\$)(?=[[:alnum:]_]|`)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
      {
        match: "(\\d)+"
      }
    ]
  "link-properties":
    name: "support.other.linkproperty.edgeql"
    begin: "(\\@)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
    ]
  identifier:
    match: "([[:alpha:]_][[:alnum:]_]*)"
  "quoted-name":
    name: "string.interpolated.edgeql"
    match: "(`.*?`)"
  values:
    patterns: [
      {
        include: "#number"
      }
      {
        include: "#bytes"
      }
      {
        include: "#string"
      }
    ]
  number:
    patterns: [
      {
        name: "constant.numeric.float.edgeql"
        match: '''
          (?x)
            (?:
              #decimal part
              \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \\b(?: [1-9](?: [0-9_]*[0-9] )? | 0 )
                (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
          
            (_*)
            \\b
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "storage.type.number.edgeql"
          "6":
            name: "invalid.illegal.dec.edgeql"
          "7":
            name: "invalid.illegal.dec.edgeql"
      }
      {
        name: "constant.numeric.float.edgeql"
        match: '''
          (?x)
            (?:
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)
          
            (_*)
            \\b
          
        '''
        captures:
          "2":
            name: "invalid.illegal.dec.edgeql"
          "3":
            name: "storage.type.number.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "invalid.illegal.dec.edgeql"
      }
      {
        name: "constant.numeric.decimal.edgeql"
        match: '''
          (?x)
            (?:
              #decimal part
              \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
                (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)?
            )
            ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
          
            (_*)
            (n)
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
          "4":
            name: "invalid.illegal.dec.edgeql"
          "5":
            name: "storage.type.number.edgeql"
          "6":
            name: "invalid.illegal.dec.edgeql"
          "7":
            name: "invalid.illegal.dec.edgeql"
          "8":
            name: "storage.type.number.edgeql"
      }
      {
        name: "constant.numeric.integer.edgeql"
        match: '''
          (?x)
            (?:
              # integer part
              \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            (_*)
            \\b
          
        '''
        captures:
          "1":
            name: "invalid.illegal.dec.edgeql"
          "2":
            name: "invalid.illegal.dec.edgeql"
      }
    ]
  string:
    patterns: [
      {
        name: "string.quoted.raw.edgeql"
        begin: "(r)(['\"])"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
      }
      {
        name: "string.quoted.edgeql"
        begin: "(['\"])"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#string-escapes"
          }
          {
            include: "#string-invalid-escapes"
          }
        ]
      }
      {
        name: "string.dollar.edgeql"
        begin: "(\\$([[:alpha:]_][[:alnum:]]*)*\\$)"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
      }
    ]
  "string-escapes":
    name: "constant.character.escape.edgeql"
    match: '''
      (?x)
        (
          \\\\(?=\\s*\\n) |
          \\\\[\\\\'"bfnrt] |
          \\\\x[0-7][0-9a-fA-F] |
          \\\\u[0-9a-fA-F]{4} |
          \\\\U[0-9a-fA-F]{8}
        )
      
    '''
  "string-invalid-escapes":
    name: "invalid.illegal.escapes.edgeql"
    match: "(\\\\.)"
  bytes:
    patterns: [
      {
        name: "string.quoted.bytes.edgeql"
        begin: "(b)(')"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#bytes-escapes"
          }
          {
            match: "([\\n -&(-\\[\\]-~])+"
          }
          {
            name: "invalid.illegal.bytes.edgeql"
            match: "(\\\\x.{1,2})|(\\\\.)|(.)"
          }
        ]
      }
      {
        name: "string.quoted.bytes.edgeql"
        begin: "(b)(\")"
        end: "(\\2)"
        beginCaptures:
          "1":
            name: "storage.type.string.edgeql"
          "2":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#bytes-escapes"
          }
          {
            match: "([\\n -!#-\\[\\]-~])+"
          }
          {
            name: "invalid.illegal.bytes.edgeql"
            match: "(\\\\x.{1,2})|(\\\\.)|(.)"
          }
        ]
      }
    ]
  "bytes-escapes":
    name: "constant.character.escape.edgeql"
    match: '''
      (?x)
        (
          \\\\[\\\\'"bfnrt] |
          \\\\x[0-9a-fA-F]{2}
        )
      
    '''
  casts:
    begin: '''
      (?xi)
        (?:
          (?<= ^ | [@~+\\-*/%^<>=?,:(\\[{])
          |
          (?<=
            AND | OR | NOT | LIKE | ILIKE | IS | IN | IF | ELSE |
            UNION | ALL | EXISTS |
      
            SELECT | GROUP | UPDATE | BY | THEN | LIMIT |
            # there are some ligature-related issues with "fi" and "ff"
            F[Ii]LTER | OF[Ff]SET
          )
        ) \\s* (\\<)
      
    '''
    end: "(\\>)"
    beginCaptures:
      "1":
        name: "keyword.operator.cast.begin.edgeql"
    endCaptures:
      "1":
        name: "keyword.operator.cast.end.edgeql"
    contentName: "meta.typecast.edgeql"
    patterns: [
      {
        include: "#types"
      }
      {
        include: "#types-common"
      }
    ]
  fncalls:
    patterns: [
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.|\\.<|\\.>)
            # function name
            (?:
              (
                # functions
                abs | all | any |
                array_agg | array_fill | array_get |
                array_join | array_replace | array_unpack |
                assert | assert_distinct | assert_exists |
                assert_single | bit_and | bit_lshift |
                bit_not | bit_or | bit_rshift |
                bit_xor | bytes_get_bit | ceil |
                contains | count | date_get |
                datetime_current | datetime_get | datetime_of_statement |
                datetime_of_transaction | datetime_truncate | duration_get |
                duration_normalize_days | duration_normalize_hours | duration_to_seconds |
                duration_truncate | enumerate | find |
                floor | get_current_database | get_instance_name |
                get_transaction_isolation | get_version | get_version_as_str |
                json_array_unpack | json_get | json_object_pack |
                json_object_unpack | json_set | json_typeof |
                len | lg | ln |
                log | max | mean |
                min | overlaps | random |
                range | range_get_lower | range_get_upper |
                range_is_empty | range_is_inclusive_lower | range_is_inclusive_upper |
                range_unpack | re_match | re_match_all |
                re_replace | re_test | round |
                sequence_next | sequence_reset | stddev |
                stddev_pop | str_lower | str_lpad |
                str_ltrim | str_pad_end | str_pad_start |
                str_repeat | str_replace | str_reverse |
                str_rpad | str_rtrim | str_split |
                str_title | str_trim | str_trim_end |
                str_trim_start | str_upper | sum |
                time_get | to_bigint | to_date_duration |
                to_datetime | to_decimal | to_duration |
                to_float32 | to_float64 | to_int16 |
                to_int32 | to_int64 | to_json |
                to_local_date | to_local_datetime | to_local_time |
                to_relative_duration | to_str | uuid_generate_v1mc |
                uuid_generate_v4 | var | var_pop
              |
                # constraints
                constraint | exclusive | expression |
                len_value | max_ex_value | max_len_value |
                max_value | min_ex_value | min_len_value |
                min_value | one_of | regexp
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.function.builtin.edgeql"
          "2":
            name: "entity.name.function.edgeql"
          "3":
            name: "string.interpolated.edgeql"
          "4":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.|\\.<|\\.>)
            # module
            (?:
              (
                cal | cfg | fts |
                math | pg | schema |
                std | sys
              )
              |
              (?# masking built-ins in odd ways)
              (
                #functions
                abs | all | any |
                array_agg | array_fill | array_get |
                array_join | array_replace | array_unpack |
                assert | assert_distinct | assert_exists |
                assert_single | bit_and | bit_lshift |
                bit_not | bit_or | bit_rshift |
                bit_xor | bytes_get_bit | ceil |
                contains | count | date_get |
                datetime_current | datetime_get | datetime_of_statement |
                datetime_of_transaction | datetime_truncate | duration_get |
                duration_normalize_days | duration_normalize_hours | duration_to_seconds |
                duration_truncate | enumerate | find |
                floor | get_current_database | get_instance_name |
                get_transaction_isolation | get_version | get_version_as_str |
                json_array_unpack | json_get | json_object_pack |
                json_object_unpack | json_set | json_typeof |
                len | lg | ln |
                log | max | mean |
                min | overlaps | random |
                range | range_get_lower | range_get_upper |
                range_is_empty | range_is_inclusive_lower | range_is_inclusive_upper |
                range_unpack | re_match | re_match_all |
                re_replace | re_test | round |
                sequence_next | sequence_reset | stddev |
                stddev_pop | str_lower | str_lpad |
                str_ltrim | str_pad_end | str_pad_start |
                str_repeat | str_replace | str_reverse |
                str_rpad | str_rtrim | str_split |
                str_title | str_trim | str_trim_end |
                str_trim_start | str_upper | sum |
                time_get | to_bigint | to_date_duration |
                to_datetime | to_decimal | to_duration |
                to_float32 | to_float64 | to_int16 |
                to_int32 | to_int64 | to_json |
                to_local_date | to_local_datetime | to_local_time |
                to_relative_duration | to_str | uuid_generate_v1mc |
                uuid_generate_v4 | var | var_pop
                |
                #constraints
                constraint | exclusive | expression |
                len_value | max_ex_value | max_len_value |
                max_value | min_ex_value | min_len_value |
                min_value | one_of | regexp
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            )
          
            \\s*(::)\\s*
          
            # function name
            (?:
              (
                #functions
                abs | all | any |
                array_agg | array_fill | array_get |
                array_join | array_replace | array_unpack |
                assert | assert_distinct | assert_exists |
                assert_single | bit_and | bit_lshift |
                bit_not | bit_or | bit_rshift |
                bit_xor | bytes_get_bit | ceil |
                contains | count | date_get |
                datetime_current | datetime_get | datetime_of_statement |
                datetime_of_transaction | datetime_truncate | duration_get |
                duration_normalize_days | duration_normalize_hours | duration_to_seconds |
                duration_truncate | enumerate | find |
                floor | get_current_database | get_instance_name |
                get_transaction_isolation | get_version | get_version_as_str |
                json_array_unpack | json_get | json_object_pack |
                json_object_unpack | json_set | json_typeof |
                len | lg | ln |
                log | max | mean |
                min | overlaps | random |
                range | range_get_lower | range_get_upper |
                range_is_empty | range_is_inclusive_lower | range_is_inclusive_upper |
                range_unpack | re_match | re_match_all |
                re_replace | re_test | round |
                sequence_next | sequence_reset | stddev |
                stddev_pop | str_lower | str_lpad |
                str_ltrim | str_pad_end | str_pad_start |
                str_repeat | str_replace | str_reverse |
                str_rpad | str_rtrim | str_split |
                str_title | str_trim | str_trim_end |
                str_trim_start | str_upper | sum |
                time_get | to_bigint | to_date_duration |
                to_datetime | to_decimal | to_duration |
                to_float32 | to_float64 | to_int16 |
                to_int32 | to_int64 | to_json |
                to_local_date | to_local_datetime | to_local_time |
                to_relative_duration | to_str | uuid_generate_v1mc |
                uuid_generate_v4 | var | var_pop
                |
                #constraints
                constraint | exclusive | expression |
                len_value | max_ex_value | max_len_value |
                max_value | min_ex_value | min_len_value |
                min_value | one_of | regexp
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.other.module.builtin.edgeql"
          "2":
            name: "support.function.builtin.edgeql"
          "3":
            name: "entity.name.function.edgeql"
          "4":
            name: "string.interpolated.edgeql"
          "5":
            name: "keyword.operator.namespace.edgeql"
          "6":
            name: "support.function.builtin.edgeql"
          "7":
            name: "entity.name.function.edgeql"
          "8":
            name: "string.interpolated.edgeql"
          "9":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
    ]
  "builtin-modules":
    name: "support.other.module.builtin.edgeql"
    match: '''
      (?x) \\b(?<!::|\\.|\\.<|\\.>)(
        cal | cfg | fts | math |
        pg | schema | std | sys
      )\\b
      
    '''
  "builtin-types":
    name: "support.type.builtin.edgeql"
    match: '''
      (?x) \\b(?<!\\.|\\.<|\\.>) (
        BaseObject | FreeObject | JsonEmpty | Object |
        anycontiguous | anydiscrete | anyenum | anyfloat |
        anyint | anynumeric | anypoint | anyreal |
        anyscalar | anytype | array | bigint |
        bool | bytes | date_duration | datetime |
        decimal | duration | enum | float32 |
        float64 | int16 | int32 | int64 |
        json | local_date | local_datetime | local_time |
        range | relative_duration | sequence | str |
        tuple | uuid
      )\\b
      
    '''
  builtins:
    patterns: [
      {
        name: "support.function.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.|\\.<|\\.>) (
            abs | all | any |
            array_agg | array_fill | array_get |
            array_join | array_replace | array_unpack |
            assert | assert_distinct | assert_exists |
            assert_single | bit_and | bit_lshift |
            bit_not | bit_or | bit_rshift |
            bit_xor | bytes_get_bit | ceil |
            contains | count | date_get |
            datetime_current | datetime_get | datetime_of_statement |
            datetime_of_transaction | datetime_truncate | duration_get |
            duration_normalize_days | duration_normalize_hours | duration_to_seconds |
            duration_truncate | enumerate | find |
            floor | get_current_database | get_instance_name |
            get_transaction_isolation | get_version | get_version_as_str |
            json_array_unpack | json_get | json_object_pack |
            json_object_unpack | json_set | json_typeof |
            len | lg | ln |
            log | max | mean |
            min | overlaps | random |
            range | range_get_lower | range_get_upper |
            range_is_empty | range_is_inclusive_lower | range_is_inclusive_upper |
            range_unpack | re_match | re_match_all |
            re_replace | re_test | round |
            sequence_next | sequence_reset | stddev |
            stddev_pop | str_lower | str_lpad |
            str_ltrim | str_pad_end | str_pad_start |
            str_repeat | str_replace | str_reverse |
            str_rpad | str_rtrim | str_split |
            str_title | str_trim | str_trim_end |
            str_trim_start | str_upper | sum |
            time_get | to_bigint | to_date_duration |
            to_datetime | to_decimal | to_duration |
            to_float32 | to_float64 | to_int16 |
            to_int32 | to_int64 | to_json |
            to_local_date | to_local_datetime | to_local_time |
            to_relative_duration | to_str | uuid_generate_v1mc |
            uuid_generate_v4 | var | var_pop
          )(?=\\s*\\()\\b
          
        '''
      }
      {
        name: "support.function.constraint.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.|\\.<|\\.>) (
            constraint | exclusive | expression |
            len_value | max_ex_value | max_len_value |
            max_value | min_ex_value | min_len_value |
            min_value | one_of | regexp
          )\\b
          
        '''
      }
      {
        include: "#builtin-modules"
      }
      {
        name: "support.other.link.builtin.edgeql"
        match: '''
          (?x) \\b(
            __edgedbsys__ | __edgedbtpl__ | __new__ |
            __old__ | __source__ | __specified__ |
            __std__ | __subject__ | __type__
          )\\b
          
        '''
      }
    ]
