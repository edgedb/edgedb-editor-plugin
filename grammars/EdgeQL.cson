# AUTOGENERATED FROM grammars/EdgeQL.syntax.yaml
name: "EdgeQL"
scopeName: "source.edgeql"
fileTypes: [
  "eql"
]
uuid: "a560aad6-9c13-49c5-a369-5fb272c8ec1a"
patterns: [
  {
    include: "#all"
  }
]
repository:
  all:
    patterns: [
      {
        include: "#fnstatement"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.statement.delimiter.edgeql"
        match: "(;)"
      }
    ]
  expressions:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#code"
      }
      {
        include: "#keywords"
      }
      {
        include: "#fncalls"
      }
      {
        include: "#operators"
      }
      {
        include: "#builtins"
      }
      {
        include: "#types"
      }
      {
        include: "#quoted-name"
      }
      {
        include: "#values"
      }
      {
        include: "#link-properties"
      }
      {
        include: "#variables"
      }
      {
        include: "#parentheses"
      }
      {
        include: "#squarebraces"
      }
      {
        include: "#curlybraces"
      }
      {
        include: "#casts"
      }
    ]
  code:
    patterns: [
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (SQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.sql"
          }
        ]
      }
      {
        begin: '''
          (?xi)
            \\b(FROM) \\s+
            (EDGEQL) \\s+
            (\\$\\w?\\$)
          
        '''
        end: "(\\3)"
        beginCaptures:
          "1":
            name: "keyword.declaration.edgeql"
          "3":
            name: "string.quoted.edgeql"
        endCaptures:
          "1":
            name: "string.quoted.edgeql"
        patterns: [
          {
            include: "source.edgeql"
          }
        ]
      }
    ]
  fnstatement:
    begin: "(?ix) \\b(?<![:\\.])(FUNCTION|AGGREGATE|CONSTRAINT)\\b"
    end: "(?=[^\\s\\w:]|\\bEXTENDING\\b|$)"
    beginCaptures:
      "1":
        name: "keyword.declaration.edgeql"
    patterns: [
      {
        include: "#builtins"
      }
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  fncalls:
    patterns: [
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.)
            # function name
            (?:
              (
                len |
                array_agg | array_contains | array_enumerate | array_unpack |
                lower |
                re_match | re_match_all | re_test |
                count | sum |
                current_date | current_datetime | current_time |
                random | uuid_generate_v1mc
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.function.builtin.edgeql"
          "2":
            name: "entity.name.function.edgeql"
          "3":
            name: "string.interpolated.edgeql"
          "4":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
      {
        name: "meta.function-call.edgeql"
        begin: '''
          (?x)
            \\b(?<!\\.)
            # module
            (?:
              (
                std | stdattrs | schema
              )
              |
              (?# masking built-ins in odd ways)
              (
                len |
                array_agg | array_contains | array_enumerate | array_unpack |
                lower |
                re_match | re_match_all | re_test |
                count | sum |
                current_date | current_datetime | current_time |
                random | uuid_generate_v1mc
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            )
          
            \\s*(::)\\s*
          
            # function name
            (?:
              (
                len |
                array_agg | array_contains | array_enumerate | array_unpack |
                lower |
                re_match | re_match_all | re_test |
                count | sum |
                current_date | current_datetime | current_time |
                random | uuid_generate_v1mc
              )
              |
              ([[:alpha:]_][[:alnum:]_]*)
              |
              (`.*?`)
            ) \\s*(\\()
          
        '''
        end: "(\\))"
        beginCaptures:
          "1":
            name: "support.other.module.builtin.edgeql"
          "2":
            name: "support.function.builtin.edgeql"
          "3":
            name: "entity.name.function.edgeql"
          "4":
            name: "string.interpolated.edgeql"
          "5":
            name: "keyword.operator.namespace.edgeql"
          "6":
            name: "support.function.builtin.edgeql"
          "7":
            name: "entity.name.function.edgeql"
          "8":
            name: "string.interpolated.edgeql"
          "9":
            name: "punctuation.definition.arguments.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.arguments.end.edgeql"
        patterns: [
          {
            include: "#fncallargs"
          }
        ]
      }
    ]
  fncallargs:
    patterns: [
      {
        include: "#definition"
      }
      {
        include: "#expressions"
      }
      {
        name: "punctuation.separator.arguments.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  definition:
    match: '''
      (?x)
        (?:
          ([[:alpha:]_][[:alnum:]_]*)
          |
          ([\\.\\d]\\S*?)
        ) (?=\\s*:=)
      
    '''
    captures:
      "1":
        name: "variable.parameter.definition.edgeql"
      "2":
        name: "invalid.illegal.definition.edgeql"
  parencommon:
    patterns: [
      {
        name: "punctuation.separator.element.edgeql"
        match: "(,)"
      }
      {
        name: "invalid.illegal.delimiter.edgeql"
        match: "(;)"
      }
    ]
  parentheses:
    begin: "(\\()"
    end: "(\\))"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  squarebraces:
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "keyword.operator.edgeql"
        match: "(^|\\b|\\s)(->)($|\\b|\\s)"
      }
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  curlybraces:
    begin: "(\\{)"
    end: "(\\})"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#commandblock"
      }
      {
        include: "#shape"
      }
    ]
  commandblock:
    begin: "(?=SET|CREATE|ALTER|DROP|RENAME|FROM)"
    end: "(?=\\})"
    patterns: [
      {
        include: "#all"
      }
    ]
  shape:
    begin: "(?=\\S)"
    end: "(?=\\})"
    patterns: [
      {
        include: "#expressions"
      }
      {
        include: "#parencommon"
      }
    ]
  comments:
    patterns: [
      {
        name: "comment.line.note.edgeql"
        match: "(#)\\s*(BUG|FIXME|TODO|XXX).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
          "2":
            name: "comment.line.note.notation.edgeql"
      }
      {
        name: "comment.line.number-sign.edgeql"
        match: "(#).*$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.edgeql"
      }
    ]
  keywords:
    patterns: [
      {
        name: "keyword.declaration.edgeql"
        match: '''
          (?ix) \\b(?<![:\\.])(
            (?# unreserved)
          
            abstract | action | after | as | asc |
            attribute | before | by | constraint |
            database | delegated | desc | event | extending | final |
            first | for | from | index | initial | last | link |
            migration | of | policy | property | required | rename |
            scalar | target | then | to | transaction | type | value | view |
          
            (?# reserved)
          
            aggregate | all | alter | and | commit | create | delete |
            distinct | drop | else | exists | filter |
            function | get | group | if | ilike | in | insert | is |
            like | limit | module | not | offset | or | order | over |
            partition | rollback | select | set | singleton | start |
            update | union | with
          )\\b
          
        '''
      }
      {
        name: "constant.language.boolean.true.edgeql"
        match: "(?i)\\b(TRUE)\\b"
      }
      {
        name: "constant.language.boolean.false.edgeql"
        match: "(?i)\\b(FALSE)\\b"
      }
      {
        name: "constant.language.empty.edgeql"
        match: "(?i)\\b(EMPTY)\\b"
      }
    ]
  operators:
    patterns: [
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
      {
        name: "keyword.declaration.edgeql"
        match: "->"
      }
      {
        name: "keyword.operator.edgeql"
        match: '''
          (?x)
            # EdgeQL-specific multi-char ops
            >= | <= | != | \\?= | \\?!= | := |
          
            # single char operators
            [+\\-*/%^<>=]
          
        '''
      }
    ]
  builtins:
    patterns: [
      {
        name: "support.function.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.) (
            len |
            array_agg | array_contains | array_enumerate | array_unpack |
            lower |
            re_match | re_match_all | re_test |
            count | sum |
            current_date | current_datetime | current_time |
            random | uuid_generate_v1mc
          )(?=\\s*\\()\\b
          
        '''
      }
      {
        name: "support.function.constraint.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.) (
          constraint | max | enum | expression | min | minexclusive |
          length | minlength | regexp | maxlength | maxexclusive | unique
          )\\b
          
        '''
      }
      {
        name: "support.other.module.builtin.edgeql"
        match: '''
          (?x) \\b(?<!::|\\.)(
            std | stdattrs | schema
          )\\b
          
        '''
      }
    ]
  types:
    patterns: [
      {
        begin: "\\b(?<!::|\\.)(map)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            include: "#types"
          }
          {
            name: "punctuation.separator.type.edgeql"
            match: "(,)"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        begin: "\\b(?<!::|\\.)(tuple)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            include: "#types"
          }
          {
            name: "punctuation.separator.type.edgeql"
            match: "(,)"
          }
          {
            match: "(:)"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        begin: "\\b(?<!::|\\.)(array)\\s*(<)"
        end: "(>)"
        beginCaptures:
          "1":
            name: "storage.type.edgeql"
          "2":
            name: "storage.type.placeholder.begin.edgeql"
        endCaptures:
          "1":
            name: "storage.type.placeholder.end.edgeql"
        patterns: [
          {
            name: "invalid.illegal.type.edgeql"
            match: "array"
          }
          {
            include: "#types"
          }
          {
            include: "#array-dimensions"
          }
          {
            include: "#types-common"
          }
        ]
      }
      {
        name: "storage.type.edgeql"
        match: '''
          (?x) \\b(?<!::|\\.)(
            array | map | tuple
          )\\b
          
        '''
      }
      {
        name: "support.type.builtin.edgeql"
        match: '''
          (?x) \\b(?<!\\.) (
            bytes | datetime | uuid | str | json | timedelta | date |
            time | int | float | bool | auto | any
          )\\b
          
        '''
      }
    ]
  "types-common":
    patterns: [
      {
        include: "#identifier"
      }
      {
        name: "keyword.operator.namespace.edgeql"
        match: "(::)"
      }
    ]
  "array-dimensions":
    begin: "(\\[)"
    end: "(\\])"
    beginCaptures:
      "1":
        name: "punctuation.parenthesis.begin.edgeql"
    endCaptures:
      "1":
        name: "punctuation.parenthesis.end.edgeql"
    patterns: [
      {
        name: "constant.numeric.edgeql"
        match: "(\\d+)"
      }
      {
        name: "invalid.illegal.type.edgeql"
        match: "\\S+"
      }
    ]
  variables:
    name: "constant.language.variable.edgeql"
    begin: "(\\$)(?=[[:alnum:]_]|`)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
      {
        match: "(\\d)+"
      }
    ]
  "link-properties":
    name: "support.other.linkproperty.edgeql"
    begin: "(\\@)"
    end: "(?<=[[:alnum:]_`])"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#quoted-name"
      }
    ]
  identifier:
    match: "([[:alpha:]_][[:alnum:]_]*)"
  "quoted-name":
    name: "string.interpolated.edgeql"
    match: "(`.*?`)"
  values:
    patterns: [
      {
        include: "#number"
      }
      {
        include: "#string"
      }
    ]
  number:
    name: "constant.numeric.edgeql"
    match: '''
      (?x)
          (?:
            #decimal part
            \\.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
            |
            # integer part
            \\b(?:[1-9](?:[0-9_]*[0-9])?|0)
              (?:\\.(_*)[0-9](?:[0-9_]*[0-9])?)?
          )
          ((_*)([eE][\\+\\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?
      
        (_*)
        \\b
      
    '''
    captures:
      "1":
        name: "invalid.illegal.dec.edgeql"
      "2":
        name: "invalid.illegal.dec.edgeql"
      "4":
        name: "invalid.illegal.dec.edgeql"
      "5":
        name: "storage.type.number.edgeql"
      "6":
        name: "invalid.illegal.dec.edgeql"
      "7":
        name: "invalid.illegal.dec.edgeql"
  string:
    patterns: [
      {
        name: "string.quoted.edgeql"
        begin: "(['\"])"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
        patterns: [
          {
            include: "#string-escapes"
          }
        ]
      }
      {
        name: "string.dollar.edgeql"
        begin: "(\\$([[:alpha:]_][[:alnum:]]*)*\\$)"
        end: "(\\1)"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.edgeql"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.edgeql"
      }
    ]
  "string-escapes":
    name: "constant.character.escape.edgeql"
    match: "(\\\\['\"])"
  casts:
    begin: '''
      (?xi)
        (?:
          (?<= ^ | [@~+\\-*/%^<>=?,:(\\[{])
          |
          (?<=
            AND | OR | NOT | LIKE | ILIKE | IS | IN | IF | ELSE |
            UNION | ALL | EXISTS |
      
            SELECT | GROUP | UPDATE | BY | THEN | LIMIT |
            # there are some ligature-related issues with "fi" and "ff"
            F[Ii]LTER | OF[Ff]SET
          )
        ) \\s* (\\<)
      
    '''
    end: "(\\>)"
    beginCaptures:
      "1":
        name: "keyword.operator.cast.begin.edgeql"
    endCaptures:
      "1":
        name: "keyword.operator.cast.end.edgeql"
    contentName: "meta.typecast.edgeql"
    patterns: [
      {
        include: "#types"
      }
      {
        include: "#types-common"
      }
    ]
